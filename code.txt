#include <Arduino.h>
#include "BluetoothSerial.h" // Include Bluetooth Serial library

BluetoothSerial BTSerial; // Create Bluetooth Serial object

int t = 4095;


byte channel_adress_table[14][4] = {
  { 0, 0, 0, 0 }, { 0, 0, 0, 1 }, { 0, 0, 1, 0 }, { 0, 0, 1, 1 },
  { 0, 1, 0, 0 }, { 0, 1, 0, 1 }, { 0, 1, 1, 0 }, { 0, 1, 1, 1 },
  { 1, 0, 0, 0 }, { 1, 0, 0, 1 }, { 1, 0, 1, 0 }, { 1, 0, 1, 1 },
  { 1, 1, 0, 0 }, { 1, 1, 0, 1 }
};

// #define BUTTON_PIN 12  // Button connected to GPIO 12

// bool buttonFlag = false;  
// bool isCalibrated = false;  // Flag to ensure calibration happens first

// void IRAM_ATTR handleButtonPress() {
//     if (isCalibrated) {  
//         buttonFlag = true;  // Allow movement only after calibration
//     }
// }

// Sensor variables
int max_values[14] = {0};
int min_values[14] = {4095};  // Initialize with max possible value
int threshold[14] = {0};

// MUX variables
#define A 23
#define B 22
#define C 21
#define D 19
#define sensor 34

// Motor driver pins
#define PWMA 32   
#define PWMB 12   
#define AIN1 33  
#define AIN2 25  
#define BIN1 14   
#define BIN2 27   
#define STBY 26   

// PID constants
double Kp = 5.65, Ki = 0, Kd = 56.5;

// PID variables
float lastError = 0, integral = 0;
const float integralLimit = 1000.0; 

// Base motor speed
int baseSpeed = 200;

void setup() {
    Serial.begin(115200);
    BTSerial.begin("ESP32_PID_Controller"); 
    Serial.println("Bluetooth initialized. Connect to 'ESP32_PID_Controller'.");

    // Set up MUX pins
    pinMode(A, OUTPUT);
    pinMode(B, OUTPUT);
    pinMode(C, OUTPUT);
    pinMode(D, OUTPUT);
    pinMode(sensor, INPUT);

    // Set up motor driver pins
    pinMode(PWMA, OUTPUT);
    pinMode(PWMB, OUTPUT);
    pinMode(AIN1, OUTPUT);
    pinMode(AIN2, OUTPUT);
    pinMode(BIN1, OUTPUT);
    pinMode(BIN2, OUTPUT);
    pinMode(STBY, OUTPUT);

    // Enable motor driver initially
    digitalWrite(STBY, HIGH);

    // Start Calibration
    setMotorSpeeds(150, -150);  
    for (int i = 0; i < 3000; ++i) {
        calibrate();
    }
    // Compute sensor thresholds
    for (int i = 0; i < 14; ++i) {
        t = min(t, max_values[i]);
    }

    t -=100;

    setMotorSpeeds(0, 0);
    delay(2000);
    // isCalibrated = true;  // Mark calibration as complete

    // pinMode(BUTTON_PIN, INPUT_PULLDOWN);  
    // attachInterrupt(BUTTON_PIN, handleButtonPress, RISING);
}

void loop() {
    // Handle Bluetooth commands
    if (BTSerial.available()) {
        String command = BTSerial.readStringUntil('\n');
        processBluetoothCommand(command);
    }

    // if (!isCalibrated) return;  // Ensure calibration is done before proceeding

    // if (buttonFlag) {  
    //     Serial.println("Button Pressed! Starting LFR...");
    //     buttonFlag = false;  // Reset flag after detecting press
    // } else {
    //     return;  // Do nothing until button is pressed
    // }

    // Line following logic
    int position = readLine();

    if (position == -1 || position == -2) { 
        setMotorSpeeds(0, 0); 
        return;
    }

    int error = position - 6500;
    error = map(error, -6500, 6500, -255, 255);

    float proportional = error;
    integral += error;
    integral = constrain(integral, -integralLimit, integralLimit);
    float derivative = error - lastError;
    float correction = (Kp * proportional) + (Ki * integral) + (Kd * derivative);
    lastError = error;

    int leftSpeed = constrain(baseSpeed + correction, -225, 225);
    int rightSpeed = constrain(baseSpeed - correction, -225, 225);

    setMotorSpeeds(leftSpeed, rightSpeed);
}

int readLine() {
   static unsigned long noLineStart = 0;
    float sums = 0;
    int active = 0;
    int overThresholdCount = 0;

    for (int i = 0; i < 14; i++) {
        Mux_Addr(i);
        int sens = analogRead(sensor);
        if (sens > t) overThresholdCount++;
        sens = (sens > t) ? 1 : 0;
        sums += sens * i * 1000 ;
        active += sens;
    }

      // Handle no line detected condition
  if (overThresholdCount > 12)
    return -2;

  if (overThresholdCount > 2) {
    sums = 0;
    active = 0;
    int centerStart = 6;
    int centerEnd = 7;

    for (int i = centerStart; i <= centerEnd; i++) {
      // Set MUX channel address
      digitalWrite(D, channel_adress_table[i][0]);
      digitalWrite(C, channel_adress_table[i][1]);
      digitalWrite(B, channel_adress_table[i][2]);
      digitalWrite(A, channel_adress_table[i][3]);

      // Read sensor value
      int sens = analogRead(sensor);
      sens = (sens > t) ? 1 : 0; // Active-low logic

      sums += sens * i * 1000  ;// Apply weight to the sensor index
      active += sens;
    }
  }

    if (active == 0) {
    if (noLineStart == 0) {
      noLineStart = millis(); // Start the timer
    } else if (millis() - noLineStart >= 150) {
      return -1; // Return -1 if active == 0 for 500ms
    }
  } else {
    noLineStart = 0; // Reset the timer if line is detected
  }

  return (active > 0) ? sums / active : 6500; // Return weighted position or default to centerS
}

void setMotorSpeeds(int leftSpeed, int rightSpeed) {
    digitalWrite(AIN1, leftSpeed >= 0);
    digitalWrite(AIN2, leftSpeed < 0);
    analogWrite(PWMA, abs(leftSpeed));

    digitalWrite(BIN1, rightSpeed >= 0);
    digitalWrite(BIN2, rightSpeed < 0);
    analogWrite(PWMB, abs(rightSpeed));
}

void processBluetoothCommand(String command) {
    command.trim();
    if (command.startsWith("Kp=")) {
        Kp = command.substring(3).toFloat();
        BTSerial.printf("Updated Kp to %.2f\n", Kp);
    } else if (command.startsWith("Ki=")) {
        Ki = command.substring(3).toFloat();
        BTSerial.printf("Updated Ki to %.2f\n", Ki);
    } else if (command.startsWith("Kd=")) {
        Kd = command.substring(3).toFloat();
        BTSerial.printf("Updated Kd to %.2f\n", Kd);
    } else {
        BTSerial.println("Invalid command. Use Kp=, Ki=, or Kd=");
    }
}

void Mux_Addr(unsigned int ch_Addr) {
    digitalWrite(D, channel_adress_table[ch_Addr][0]);
    digitalWrite(C, channel_adress_table[ch_Addr][1]);
    digitalWrite(B, channel_adress_table[ch_Addr][2]);
    digitalWrite(A, channel_adress_table[ch_Addr][3]);
}

void calibrate() {
    for (int i = 0; i < 14; i++) {
        Mux_Addr(i);
        int val = analogRead(sensor);
        if (val < min_values[i]) min_values[i] = val;
        if (val > max_values[i]) max_values[i] = val;
    }
}
